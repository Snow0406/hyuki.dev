---
import Breadcrumbs from '@/components/Breadcrumbs.astro'
import Container from '@/components/Container.astro'
import ProjectCard from '@/components/ProjectCard.astro'
import PaginationComponent from '@/components/ui/pagination'
import { SITE } from '@/consts'
import Layout from '@/layouts/Layout.astro'
import type { PaginateFunction } from 'astro'
import { type CollectionEntry, getCollection } from 'astro:content'

const STATUS_ORDER = ['In Progress', 'Completed', 'Planned', 'Paused']

export async function getStaticPaths({
  paginate,
}: {
  paginate: PaginateFunction
}) {
  const allProjects = await getCollection('projects')

  // 상태별 1차 정렬 후 개발 시작 날짜별 2차 정렬
  const sortedProjects = [...allProjects].sort((a, b) => {
    const statusA = a.data.status || 'Other'
    const statusB = b.data.status || 'Other'

    // 상태가 다른 경우 상태 우선순위로 정렬
    const statusComparison =
      STATUS_ORDER.indexOf(statusA) - STATUS_ORDER.indexOf(statusB)
    if (statusComparison !== 0) return statusComparison

    // 상태가 같은 경우 시작 날짜별로 정렬 (최신순)
    const dateA = a.data.startDate ? new Date(a.data.startDate).getTime() : 0
    const dateB = b.data.startDate ? new Date(b.data.startDate).getTime() : 0

    // 시작 날짜가 최신인 프로젝트가 먼저 오도록 내림차순 정렬
    return dateB - dateA
  })

  return paginate(sortedProjects, { pageSize: SITE.POSTS_PER_PAGE })
}

const { page } = Astro.props

// 프로젝트를 상태별로 그룹화 (이미 정렬된 상태에서 그룹화만 수행)
const projectsByStatus = page.data.reduce(
  (acc: Record<string, CollectionEntry<'projects'>[]>, project) => {
    const status = project.data.status || 'Other'
    if (!acc[status]) {
      acc[status] = []
    }
    acc[status].push(project)
    return acc
  },
  {},
)

// 상태별로 정렬된 상태 키 배열
const statuses = Object.keys(projectsByStatus).sort(
  (a, b) => STATUS_ORDER.indexOf(a) - STATUS_ORDER.indexOf(b),
)
---

<Layout title="Project" description="Project">
  <Container class="flex grow flex-col gap-y-6">
    <Breadcrumbs
      items={[
        { label: 'Project', href: '/project', icon: 'lucide:archive' },
        { label: `Page ${page.currentPage}`, icon: 'lucide:folder-open' },
      ]}
    />

    <div class="flex min-h-[calc(100vh-18rem)] flex-col gap-y-8">
      {
        statuses.map((status) => (
          <section class="flex flex-col gap-y-4">
            <div class="font-semibold">{status}</div>
            <ul class="not-prose flex flex-col gap-4">
              {projectsByStatus[status].map((project) => (
                <li>
                  <ProjectCard project={project} />
                </li>
              ))}
            </ul>
          </section>
        ))
      }
    </div>

    <PaginationComponent
      currentPage={page.currentPage}
      totalPages={page.lastPage}
      baseUrl="/project/"
      client:load
    />
  </Container>
</Layout>
