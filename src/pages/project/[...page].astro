---
import Breadcrumbs from '@/components/Breadcrumbs.astro'
import Container from '@/components/Container.astro'
import PageHead from '@/components/PageHead.astro'
import ProjectCard from '@/components/ProjectCard.astro'
import PaginationComponent from '@/components/ui/pagination'
import { SITE } from '@/consts'
import Layout from '@/layouts/Layout.astro'
import {
  getAllProjects,
  groupProjectsByStatus,
  PROJECT_STATUS,
} from '@/lib/data-utils'
import type { PaginateFunction } from 'astro'

export async function getStaticPaths({
  paginate,
}: {
  paginate: PaginateFunction
}) {
  const allProjects = await getAllProjects()
  return paginate(allProjects, { pageSize: SITE.postsPerPage })
}

const { page } = Astro.props

// 프로젝트를 상태별로 그룹화 (이미 정렬된 상태에서 그룹화만 수행)
const projectsByStatus = groupProjectsByStatus(page.data)

const statuses = Object.keys(projectsByStatus).sort(
  (a, b) => PROJECT_STATUS.indexOf(a) - PROJECT_STATUS.indexOf(b),
)
---

<Layout>
  <PageHead slot="head" title="Project" />
  <Container class="flex grow flex-col gap-y-6">
    <Breadcrumbs
      items={[
        { label: 'Project', href: '/project', icon: 'lucide:code-2' },
        { label: `Page ${page.currentPage}`, icon: 'lucide:layout' },
      ]}
    />

    <div class="flex min-h-[calc(100vh-18rem)] flex-col gap-y-8">
      {
        statuses.map((status) => (
          <section class="flex flex-col gap-y-4">
            <div class="font-semibold">{status}</div>
            <ul class="not-prose flex flex-col gap-4">
              {projectsByStatus[status].map((project) => (
                <li>
                  <ProjectCard project={project} />
                </li>
              ))}
            </ul>
          </section>
        ))
      }
    </div>

    <PaginationComponent
      currentPage={page.currentPage}
      totalPages={page.lastPage}
      baseUrl="/project/"
      client:load
    />
  </Container>
</Layout>
