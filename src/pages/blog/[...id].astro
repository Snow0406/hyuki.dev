---
import Breadcrumbs from '@/components/Breadcrumbs.astro'
import Link from '@/components/Link.astro'
import PostHead from '@/components/PostHead.astro'
import PostNavigation from '@/components/PostNavigation.astro'
import TableOfContents from '@/components/TableOfContents.astro'
import TableOfContentsPrebuilt from '@/components/TableOfContentsPrebuilt.astro'
import { badgeVariants } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { Separator } from '@/components/ui/separator'
import Layout from '@/layouts/Layout.astro'
import { parseAuthors } from '@/lib/server-utils'
import { formatDate, readingTime } from '@/lib/utils'
import { Icon } from 'astro-icon/components'
import { Image } from 'astro:assets'
import { type CollectionEntry, getCollection, render } from 'astro:content'

interface Props extends CollectionEntry<'blog'> {}

export async function getStaticPaths() {
  const posts = (await getCollection('blog', ({ data }) => !data.draft)).sort(
    (a, b) => b.data.date.valueOf() - a.data.date.valueOf(),
  )

  return posts.map((post) => ({
    params: { id: post.id },
    props: post,
  }))
}

const allPosts = await getCollection('blog', ({ data }) => !data.draft)

const posts = (await getCollection('blog', ({ data }) => !data.draft)).sort(
  (a, b) => b.data.date.valueOf() - a.data.date.valueOf(),
)

const visiblePosts = posts.filter((post) => post.data.hidden !== true)

// 이전/다음 포스트 가져오기 함수
function getAdjacentPosts(currentId: string, postList: Props[]) {
  const index = postList.findIndex((post) => post.id === currentId)
  return {
    prev: index > 0 ? postList[index - 1] : null,
    next:
      index >= 0 && index < postList.length - 1 ? postList[index + 1] : null,
  }
}

// 현재 포스트 정보
const post = Astro.props
const currentPostId = Astro.params.id as string
const isSubpost = !!post.data.parentSlug

const { prev: prevPost, next: nextPost } = isSubpost
  ? getAdjacentPosts(
      currentPostId,
      posts
        .filter((p) => p.data.parentTitle === post.data.parentTitle)
        .sort((a, b) => a.data.date.valueOf() - b.data.date.valueOf()),
    )
  : getAdjacentPosts(currentPostId, visiblePosts)

const { Content, headings } = await render(post)
const authors = await parseAuthors(post.data.authors ?? [])

const stripCodeBlocks = (text: string | undefined) =>
  text ? text.replace(/```[\s\S]*?```/g, '') : ''

// 메인 포스트인 경우 서브 포스트까지 포함한 읽기 시간 계산
// 이미 필터링된 allPosts에서 서브 포스트 찾기
const subposts = isSubpost
  ? []
  : allPosts.filter((p) => p.data.parentTitle === post.data.title)
const totalBody = isSubpost
  ? post.body || ''
  : [post.body || '', ...subposts.map((p) => p.body || '')]
      .map(stripCodeBlocks)
      .join('')
const readTime = readingTime(totalBody)
---

<Layout>
  <PostHead slot="head" post={post} />
  <section
    class="grid grid-cols-[minmax(0px,1fr)_min(768px,100%)_minmax(0px,1fr)] gap-y-5 *:px-4"
  >
    <Breadcrumbs
      items={[
        { href: '/blog', label: 'Blog', icon: 'lucide:archive' },
        ...(isSubpost
          ? [
              {
                href: post.data.parentSlug,
                label: post.data.parentTitle ?? 'Parent Post',
                icon: 'lucide:file-text',
              },
              {
                label: post.data.title.split(': ')[1] ?? post.data.title,
                icon: 'lucide:pilcrow',
              },
            ]
          : [{ label: post.data.title, icon: 'lucide:file-text' }]),
      ]}
      class="col-start-2"
    />
    {
      !isSubpost && post.data.image ? (
        <Image
          src={post.data.image}
          alt={post.data.title}
          width={1200}
          height={630}
          class="col-span-full mx-auto w-full max-w-[1000px] rounded-4xl object-cover"
        />
      ) : (
        !isSubpost &&
        (
          <img
            src={`/og/${post.id}.png`}
            alt={post.data.title}
            width={1200}
            height={630}
            class="col-span-full mx-auto w-full max-w-[1000px] rounded-4xl object-cover"
          />
        )``
      )
    }

    <section class="col-start-2 flex flex-col gap-y-6 text-center">
      {
        !isSubpost && (
          <div class="flex flex-col gap-y-4">
            <h1 class="text-4xl leading-tight font-medium text-pretty sm:text-5xl">
              {post.data.title}
            </h1>

            <div class="text-muted-foreground flex flex-wrap items-center justify-center gap-2 text-sm">
              {authors.length > 0 && (
                <>
                  <div class="flex items-center gap-x-2">
                    {authors.map((author) => (
                      <div class="flex items-center gap-x-1.5">
                        <Image
                          src={author.avatar}
                          alt={author.name}
                          width={24}
                          height={24}
                          class="rounded-full"
                        />
                        {author.isRegistered ? (
                          <Link
                            href={`/authors/${author.id}`}
                            underline
                            class="text-foreground"
                          >
                            <span>{author.name}</span>
                          </Link>
                        ) : (
                          <span>{author.name}</span>
                        )}
                      </div>
                    ))}
                  </div>
                  <Separator orientation="vertical" className="h-4!" />
                </>
              )}
              <div class="flex items-center gap-2">
                <span>{formatDate(post.data.date)}</span>
                <Separator orientation="vertical" className="h-4!" />
                <span>{readTime}</span>
              </div>
            </div>
            <div class="flex flex-wrap justify-center gap-2">
              {post.data.tags && post.data.tags.length > 0 ? (
                post.data.tags.map((tag) => (
                  <a
                    href={`/tags/${tag}`}
                    class={badgeVariants({ variant: 'secondary' })}
                  >
                    <Icon name="lucide:hash" class="size-3" />
                    {tag}
                  </a>
                ))
              ) : (
                <span class="text-muted-foreground text-sm">
                  No tags available
                </span>
              )}
            </div>
          </div>
        )
      }

      <PostNavigation prevPost={prevPost} nextPost={nextPost} />
    </section>

    {headings.length > 0 && <TableOfContents headings={headings} />}

    <article class="prose col-start-2 max-w-none">
      <Content />
    </article>

    {
      isSubpost && post.data.tableOfContents && (
        <TableOfContentsPrebuilt
          headings={post.data.tableOfContents}
          activeSlug={post.data.activeSlug}
          title={post.data.tableOfContentsTitle}
        />
      )
    }

    <PostNavigation prevPost={prevPost} nextPost={nextPost} />
  </section>

  <Button
    variant="outline"
    size="icon"
    className="group fixed right-8 bottom-8 z-50 hidden"
    id="scroll-to-top"
    title="Scroll to top"
    aria-label="Scroll to top"
  >
    <Icon
      name="lucide:arrow-up"
      class="mx-auto size-4 transition-all group-hover:-translate-y-0.5"
    />
  </Button>

  <script>
    document.addEventListener('astro:page-load', () => {
      const scrollToTopButton = document.getElementById('scroll-to-top')
      const footer = document.querySelector('footer')

      if (scrollToTopButton && footer) {
        scrollToTopButton.addEventListener('click', () => {
          window.scrollTo({ top: 0, behavior: 'smooth' })
        })

        window.addEventListener('scroll', () => {
          const footerRect = footer.getBoundingClientRect()
          const isFooterVisible = footerRect.top <= window.innerHeight

          scrollToTopButton.classList.toggle(
            'hidden',
            window.scrollY <= 300 || isFooterVisible,
          )
        })
      }
    })
  </script>
</Layout>
