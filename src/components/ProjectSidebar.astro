---
import { ScrollArea } from '@/components/ui/scroll-area'
import { Icon } from 'astro-icon/components'
import type { CollectionEntry } from 'astro:content'
import Link from './Link.astro'

interface Props {
  project: CollectionEntry<'projects'>
}

const { project } = Astro.props

const hasLinks = project.data.link && project.data.link.length > 0
const hasContributions =
  project.data.contributions && project.data.contributions.length > 0
const hasTeam = project.data.team && project.data.team.length > 0
---

<details
  open
  class="group col-start-2 mx-4 block rounded-xl border p-4 xl:hidden"
>
  <summary
    class="flex cursor-pointer items-center justify-between text-xl font-semibold group-open:pb-4"
  >
    Project Info
    <Icon
      name="lucide:chevron-down"
      class="size-5 transition-transform group-open:rotate-180"
    />
  </summary>
  <ScrollArea
    client:load
    className="flex max-h-80 flex-col overflow-y-auto"
    type="always"
    data-project-sidebar-mobile-scroll
  >
    <div class="space-y-4 pt-2">
      {
        hasLinks && (
          <div>
            <h3 class="text-foreground text-sm font-medium">Links</h3>
            <ul class="mt-2 space-y-1">
              {project.data.link!.map((linkItem) => (
                <li class="flex items-center gap-1">
                  <Icon
                    name={linkItem.icon || 'lucide:link'}
                    class="text-muted-foreground size-3.5"
                  />
                  {linkItem.url ? (
                    <Link
                      href={linkItem.url}
                      external
                      underline
                      class="text-muted-foreground hover:text-foreground hover:decoration-foreground text-sm"
                    >
                      {linkItem.name}
                    </Link>
                  ) : (
                    <span class="text-muted-foreground text-sm">
                      {linkItem.name}
                    </span>
                  )}
                </li>
              ))}
            </ul>
          </div>
        )
      }

      {
        hasContributions && (
          <div>
            <h3 class="text-foreground text-sm font-medium">
              My Contributions
            </h3>
            <ul class="text-muted-foreground mt-2 list-outside list-disc pl-5 text-sm">
              {project.data.contributions!.map((contribution) => (
                <li>{contribution}</li>
              ))}
            </ul>
          </div>
        )
      }

      {
        hasTeam && (
          <div>
            <h3 class="text-foreground text-sm font-medium">Team</h3>
            <ul class="text-muted-foreground mt-2 list-outside list-disc pl-5 text-sm">
              {project.data.team!.map((member) => (
                <li>
                  {member.name}
                  {member.role && <span class="text-xs"> - {member.role}</span>}
                </li>
              ))}
            </ul>
          </div>
        )
      }
    </div>
  </ScrollArea>
</details>

<nav
  class="sticky top-[5.5rem] col-start-1 hidden h-[calc(100vh-5.5rem)] text-xs leading-4 xl:block"
>
  <div class="flex justify-end">
    <ScrollArea
      client:load
      className="max-h-[calc(100vh-8rem)]"
      type="always"
      data-project-sidebar-desktop-scroll
    >
      <div class="flex flex-col gap-y-4 overflow-y-auto px-8">
        <h2 class="mb-2 text-lg font-semibold">Project Info</h2>

        {
          hasLinks && (
            <div>
              <h3 class="text-foreground text-sm font-medium">Links</h3>
              <ul class="mt-2 space-y-1">
                {project.data.link!.map((linkItem) => (
                  <li class="flex items-center gap-1">
                    <Icon
                      name={linkItem.icon || 'lucide:link'}
                      class="text-muted-foreground size-3.5"
                    />
                    {linkItem.url ? (
                      <Link
                        href={linkItem.url}
                        external
                        underline
                        class="text-muted-foreground hover:text-foreground hover:decoration-foreground text-sm"
                      >
                        {linkItem.name}
                      </Link>
                    ) : (
                      <span class="text-muted-foreground text-sm">
                        {linkItem.name}
                      </span>
                    )}
                  </li>
                ))}
              </ul>
            </div>
          )
        }

        {
          hasContributions && (
            <div>
              <h3 class="text-foreground text-sm font-medium">
                My Contributions
              </h3>
              <ul class="text-muted-foreground mt-2 list-outside list-disc pl-5 text-sm">
                {project.data.contributions!.map((contribution) => (
                  <li>{contribution}</li>
                ))}
              </ul>
            </div>
          )
        }

        {
          hasTeam && (
            <div>
              <h3 class="text-foreground text-sm font-medium">Team</h3>
              <ul class="text-muted-foreground mt-2 list-outside list-disc pl-5 text-sm">
                {project.data.team!.map((member) => (
                  <li>
                    {member.name}
                    {member.role && (
                      <span class="text-xs"> - {member.role}</span>
                    )}
                  </li>
                ))}
              </ul>
            </div>
          )
        }
      </div>
    </ScrollArea>
  </div>
</nav>

<script>
  class ProjectSidebarState {
    mobileScrollArea: HTMLElement | null = null
    desktopScrollArea: HTMLElement | null = null
    mobileSidebarScrollArea: HTMLElement | null = null
    desktopSidebarScrollArea: HTMLElement | null = null

    reset() {
      this.mobileScrollArea = null
      this.desktopScrollArea = null
      this.mobileSidebarScrollArea = null
      this.desktopSidebarScrollArea = null
    }
  }

  const state = new ProjectSidebarState()

  class ProjectSidebarScrollMask {
    static updateMobile() {
      if (!state.mobileScrollArea || !state.mobileSidebarScrollArea) return

      const { scrollTop, scrollHeight, clientHeight } = state.mobileScrollArea
      const threshold = 5
      const isAtTop = scrollTop <= threshold
      const isAtBottom = scrollTop >= scrollHeight - clientHeight - threshold

      state.mobileSidebarScrollArea.classList.toggle(
        'mask-t-from-90%',
        !isAtTop,
      )
      state.mobileSidebarScrollArea.classList.toggle(
        'mask-b-from-90%',
        !isAtBottom,
      )
    }

    static updateDesktop() {
      if (!state.desktopScrollArea || !state.desktopSidebarScrollArea) return

      const { scrollTop, scrollHeight, clientHeight } = state.desktopScrollArea
      const threshold = 5
      const isAtTop = scrollTop <= threshold
      const isAtBottom = scrollTop >= scrollHeight - clientHeight - threshold

      state.desktopSidebarScrollArea.classList.toggle(
        'mask-t-from-90%',
        !isAtTop,
      )
      state.desktopSidebarScrollArea.classList.toggle(
        'mask-b-from-90%',
        !isAtBottom,
      )
    }
  }

  class ProjectSidebarController {
    static init() {
      state.reset()

      // 모바일 사이드바 초기화
      const mobileDetails = document.querySelector(
        'details[class*="col-start-2"]',
      )
      if (mobileDetails) {
        state.mobileScrollArea = mobileDetails.querySelector(
          '[data-radix-scroll-area-viewport]',
        )
        state.mobileSidebarScrollArea = mobileDetails.querySelector(
          '[data-project-sidebar-mobile-scroll]',
        )

        if (state.mobileScrollArea) {
          state.mobileScrollArea.addEventListener(
            'scroll',
            ProjectSidebarScrollMask.updateMobile,
            { passive: true },
          )
        }
      }

      // 데스크탑 사이드바 초기화
      const desktopNav = document.querySelector('nav[class*="col-start-1"]')
      if (desktopNav) {
        state.desktopScrollArea = desktopNav.querySelector(
          '[data-radix-scroll-area-viewport]',
        )
        state.desktopSidebarScrollArea = desktopNav.querySelector(
          '[data-project-sidebar-desktop-scroll]',
        )

        if (state.desktopScrollArea) {
          state.desktopScrollArea.addEventListener(
            'scroll',
            ProjectSidebarScrollMask.updateDesktop,
            { passive: true },
          )
        }
      }

      // 초기 마스크 업데이트
      setTimeout(() => {
        ProjectSidebarScrollMask.updateMobile()
        ProjectSidebarScrollMask.updateDesktop()
      }, 100)
    }

    static cleanup() {
      if (state.mobileScrollArea) {
        state.mobileScrollArea.removeEventListener(
          'scroll',
          ProjectSidebarScrollMask.updateMobile,
        )
      }
      if (state.desktopScrollArea) {
        state.desktopScrollArea.removeEventListener(
          'scroll',
          ProjectSidebarScrollMask.updateDesktop,
        )
      }
      state.reset()
    }
  }

  document.addEventListener('astro:page-load', () =>
    ProjectSidebarController.init(),
  )
  document.addEventListener('astro:after-swap', () => {
    ProjectSidebarController.cleanup()
    ProjectSidebarController.init()
  })
  document.addEventListener('astro:before-swap', () =>
    ProjectSidebarController.cleanup(),
  )
</script>
